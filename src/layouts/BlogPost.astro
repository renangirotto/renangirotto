---
import type { CollectionEntry } from "astro:content";

import BaseHead from "@/components/BaseHead.astro";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import FormattedDate from "@/components/FormattedDate.astro";

type Props = CollectionEntry<"blog">["data"];

const { title, description, pubDate } = Astro.props;
---

<html lang="pt-br" class="is-theme-dark">
  <head>
    <BaseHead title={`${title} | Renan Girotto`} description={description} />
  </head>

  <body>
    <progress
      aria-hidden="true"
      class="progress"
      id="text-read-progress"
      max="100"
      value="70">70%</progress
    >
    <Header />
    <main>
      <article id="article" class="container">
        <div class="header">
          <h1 class="title">{title}</h1>
          <div class="date">
            <FormattedDate date={pubDate} />
          </div>
        </div>
        <slot />
      </article>
    </main>
    <Footer />

    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const article = document.getElementById("article");
        const progressBar = document.getElementById("text-read-progress");

        if (!article || !progressBar) return;

        const updateReadProgress = () => {
          const articleRect = article.getBoundingClientRect();
          const viewportHeight = window.innerHeight;

          const articleTop = articleRect.top;

          const totalArticleHeight = articleRect.height;

          let scrolledPercentage = 0;

          if (totalArticleHeight > viewportHeight) {
            const scrollDistance = -articleTop;
            const scrollableHeight = totalArticleHeight - viewportHeight;

            if (scrollableHeight > 0) {
              scrolledPercentage = (scrollDistance / scrollableHeight) * 100;
              scrolledPercentage = Math.max(
                0,
                Math.min(100, scrolledPercentage)
              );
            } else {
              scrolledPercentage = 100;
            }
          } else {
            if (articleTop <= 0) {
              scrolledPercentage = 100;
            } else {
              scrolledPercentage = 0;
            }
          }

          (progressBar as HTMLProgressElement).value = scrolledPercentage;
        };

        window.addEventListener("scroll", updateReadProgress);
        updateReadProgress();
      });
    </script>
  </body>
</html>

<style>
  .header {
    &:not(:last-child) {
      margin-block-end: 3.5rem;
    }
  }

  .progress {
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    width: 100%;
    height: 4px;
    border: none;
    position: fixed;
    inset: 0 0 auto 0;
    background: transparent;

    &[value]::-webkit-progress-value {
      background: light-dark(
        var(--color-light-pink-100),
        var(--color-dark-pink-100)
      );
    }

    &[value]::-webkit-progress-value {
      background: light-dark(
        var(--color-light-pink-100),
        var(--color-dark-pink-100)
      );
    }

    &[value]::-webkit-progress-bar {
      background: transparent;
    }

    &[value]::-moz-progress-bar {
      background: light-dark(
        var(--color-light-pink-100),
        var(--color-dark-pink-100)
      );
    }
  }

  .title {
    font-size: 2rem;

    @container main-container (width >= 768px) {
      font-size: 2.5rem;
    }
  }

  article {
    h1,
    h2,
    h3 {
      color: light-dark(
        var(--color-light-pink-100),
        var(--color-dark-pink-100)
      );
    }

    h2,
    h3 {
      &:not(:last-child) {
        margin-block: 3.5rem 0;
      }
    }

    hr {
      opacity: 0.25;
    }

    p {
      &:not(:last-child) {
        margin-block: 1.5rem;
      }

      a {
        font-weight: 600;
        color: light-dark(
          var(--color-light-pink-100),
          var(--color-dark-pink-100)
        );
      }

      code {
        padding-block: 3px;
        padding-inline: 6px;
        border-radius: 2px;
        font-size: 0.875rem;
        color: light-dark(
          var(--color-light-pink-100),
          var(--color-dark-pink-100)
        );
        background: light-dark(
          var(--color-light-background-200),
          var(--color-dark-selection-200)
        );
      }
    }

    pre {
      &[data-language] {
        padding-block: 1rem;
        padding-inline: 1rem;
        border-radius: 4px;
        background: light-dark(
          var(--color-light-background-200),
          var(--color-dark-selection-200)
        );
      }
    }
  }
</style>
